class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adjacency_list = {v: set() for v in vertices}

    def add_edge(self, v1, v2):
        self.adjacency_list[v1].add(v2)
        self.adjacency_list[v2].add(v1)

    def get_neighbors(self, v):
        return self.adjacency_list[v]


def graph_coloring(graph):
    colors = {}
    for vertex in graph.vertices:
        used_colors = set()
        for neighbor in graph.get_neighbors(vertex):
            if neighbor in colors:
                used_colors.add(colors[neighbor])
        for i in range(1, len(graph.vertices) + 1):
            if i not in used_colors:
                colors[vertex] = i
                break
        else:
            return "No valid coloring exists."
    return colors
